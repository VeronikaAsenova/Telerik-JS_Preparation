Javascript инструменти

-Javascript  е скриптов език, т.е не се компилира, а се интерпретира.
Има машина, върви ред по ред, чете кода и казва на браузъра или node-a какво да направи



Може да се пише навсякъде, нужно е да копираме написаното и с F12 отваряме браузъра -> developer tools->conosole



Типове данни
Типът се определя от 2 неща:
-от множество от стойности (пр. естествени числа 1-2-3-5-20 и т.н 32битови числа)
-от операции върху тях (събиране, изваждане, побитови операции и т.н)

!!!Винаги в началото на всеки код се изписва `use strict`; - за да ни предпази от нататъшни грешки
-> ако искаме да проверим какъв е типът на дадена стойност и дали въвеждаме правилни параметри, правим проверка с: 
console.log(typeof 6);
console.log(typeof 6.5); 
run-ваме и пишем node и името на файла. И в двата случая ще принтира number, независимо, че едното е цяло, а другото дробно

console.log(typeof {}); -> обект
console.log(typeof []); -> пак обект ще изведе (масив)
console.log(typeof true); ->boolean

console.log(typeof null) -> object
console.log(typeof undefined)-> undefined

!!!***shift+десен бутон на мишка-> отваря cmd, където да run-ем кода

!!!*** КАКВА Е РАЗЛИКАТА МЕЖДУ 
-var ( неприятни свойства, прави мизерии-забравяме, че съществува)

Заради това ползваме стандарта на EcmaScript 2015:
-let ->  може да променяме стойността на променливата
-const->  НЕ може да променяме стойността на променливата, стойността е ПОСТОЯННА


***ДЕЛЕНИЕТО В JS ВРЪЩА ДРОБНИ ЧИСЛА, Т.Е console.log(5/3)=1.66666667
***Ако искаме да ореже остатъка и да ни върне само число console.log(Math.trunc(5/3));   =>1
***Ако искаме да се изхитрим  и по-бърз начин console.log(5/3 | 0);   =>1


Как стринг да стане на число!!! Пример:

const integer="1737";

културният начин е console.log(ParseInt(integer)+1); => 1738
Обаче, ако имаме :
const integer="1737stama20t"; 
console.log(ParseInt(integer)+1); => 1738   *** понеже е good guy ще парсне докъдето може

!!!НАй-добрият начин за конвертиране е с функцията Number :

const integer="1737";
console.log(Number(integer)+10);     =>1747

const integer="1737stama20t";
console.log(Number(integer)+10);    => NaN


!!!3вариант :(+integer) както в математиката (-х , колкото има в х взима обратното му число,
 а +х , колкото има в х толкова взима като стойност)

const integer="1737";
console.log(+integer +10);       =>1747

const integer="1737stama20t";
console.log(+integer +10);    => NaN
* console.log(+integer +10);

!!!ПОВДИГАНЕ НА СТЕПЕН СТАВА ЧРЕЗ "**" ,пример:
2**1 + 2**... и т.н
2**(-5)

!!! Ако искаме да разберем най-малката или най-голямата или каквото и да е като стойност за JS използваме функцията Number. 
пример: const maxNumber= Number.Max_Value (s.o)


***СРАВНЯВАНЕ КОРЕКТНО:
const a=0.1,
const b=0.2,
const sum=0.3;


const MAX_DIFF=0.0001;
console.log(Math.abs((a+b)-sum)<MAX_DIFF); 

същото, ако идва и като вход от потребител пример:
function comeFromUser(){
return 1;
}
function comeFromUser2(){
return 1.3;
}
function comeFromUser3(){
return 0.3;
}

const a=comeFromUser(),
const b=comeFromUser2(),
const sum=comeFromUser3();

Литерал е специален синтаксис, с който директно създаваме стойност от някакъв тип
пр. стринга "Gosho", число 5,6,7 ,  булев true,false   s.o

В JS не е проблем долепянето на стрингове (конкатенацията) както в типизираните езици примерно( т.е не е бавно)

Кавички!!! '' ; "" ; `` ;
За стрингосване е лесна употребата на console.log(`${}`);

Undefined & Null => Пример

let gosho;
const tosho;

Ще имаме резултат undefined за gosho и сериозна грешка за const tosho
Употребявайки const трябва да е ясно инициализиран, също така не може по-късно примерно да искаме да ? присвояваме стойност, НЕ
Но за null, винаги трябва да се декларира
let gosho=null;










